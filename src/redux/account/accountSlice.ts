import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface User {
    id: string;
    email: string;
    name: string;
    role: string;
    avatar?: string;
    phone?: string;
    fullName?: string;
}

interface AccountState {
    isAuthenticated: boolean;
    isLoading: boolean;
    user: User | null;
    tempAvatar?: string;
}

const initialState: AccountState = {
    isAuthenticated: false,
    isLoading: true,
    user: null,
};

export const accountSlice = createSlice({
    name: 'account',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        doLoginAction: (state, action: PayloadAction<User>) => {
            state.isAuthenticated = true;
            state.user = action.payload;
        },
        doGetAccountAction: (state, action: PayloadAction<User>) => {
            state.isAuthenticated = true;
            state.user = action.payload;
            state.isLoading = false;
        },
        doLogoutAction: (state) => {
            state.isAuthenticated = false;
            state.user = null;
        },
        doUpdateUserInfoAction: (state, action) => {
            if (state.user) {
                state.user.avatar = action.payload.avatar;
                state.user.phone = action.payload.phone;
                state.user.fullName = action.payload.fullName;
            }
        },
        doUploadAvatarAction: (state, action) => {
            state.tempAvatar = action.payload.avatar
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {

    },
});

export const {
    doLoginAction,
    doGetAccountAction,
    doLogoutAction,
    doUpdateUserInfoAction,
    doUploadAvatarAction
} = accountSlice.actions;

export default accountSlice.reducer;
